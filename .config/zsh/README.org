#+TITLE: ZSH configuration
#+PROPERTY: header-args :mkdirp yes

* Introduction

Hello and welcome. This is the Org-file which contains (or will contain) all of
my personal zsh configurations. There's a lot to go through, but hopefully
writing this will give me a good excuse to make an end of it all.

I'm presently not ready for fully committing to using emacs' built-in shell
=eshell=, so that means relying on =zsh=.

* .zshrc
** User edit warning
First we tell vim to use plain 'sh' highlighting:
#+begin_src shell :tangle .zshrc
  # vim: set ft=sh :
#+end_src
And tell the user not to edit this file:
#+begin_src shell :tangle .zshrc
  # Don't edit this file. Modify and re-tangle the README.org instead.
  # (it may or may not do this when you write it)
#+end_src
** Startup-chain logic
Next exit if this is a non-interactive shell.
#+begin_src shell :tangle .zshrc
  [[ $- != *i* ]] && return
#+end_src
Launch a graphical environment: sway on tty7, Xorg on tty5, and nothing for
other terminals.
#+begin_src shell :tangle .zshrc
  case "${TTY}" in
      /dev/tty5)
          startx $XINITRC ;;
      /dev/tty7)
          exec sway ;;
      ,*)
      ;;
  esac
#+end_src
Start =tmux= conditionally. Only if the host terminal isn't on our whitelist,
and there isn't already a tmux running. We note the current $TERM and carry it
over to the resulting tmux session. My neofetch config also displays this value
if set.
#+begin_src shell :tangle .zshrc
  case "${TMUX}" in
      ,*) export OLDTERM="${TERM}"
         ;;
      "") case "${TERM}" in
              alacritty|eterm*|xterm-*) ;;
              ,*) OLDTERM="${TERM}" exec tmux ;;
          esac ;;
  esac
#+end_src
** zplug, for plugins
Bootstrap and invoke zplug, a git-based /zsh/ plugin manager similar to
vim-plug.
#+begin_src shell :tangle .zshrc
  # Maybe install zplug, and definitely make it update stuff
  export ZDOTDIR="$XDG_CONFIG_HOME/zsh"
  export ZPLUG_HOME="${ZDOTDIR}/zplug"
  [ -d $ZDOTDIR/zplug ] || (
      git clone https://github.com/zplug/zplug $ZPLUG_HOME #2>/dev/null
  )
  source $ZPLUG_HOME/init.zsh
  zplug 'zplug/zplug', hook-build:'zplug --self-manage'
  zplug "romkatv/powerlevel10k", as:theme, depth:1
  zplug "zdharma-continuum/fast-syntax-highlighting", defer:2
  # zplug 'zsh-users/zsh-history-substring-search', depth:1
  zplug "zsh-users/zsh-autosuggestions"
  zplug "zsh-users/zsh-completions"
  zplug "dylanaraps/neofetch", as:command, depth:1
  zplug "dylanaraps/pfetch", as:command, depth:1
  zplug "keroserene/rickrollrc", as:command, depth:1, use:roll.sh, rename-to:dc
  zplug "hkbakke/bash-insulter", use:"src/*"
  # Install plugins if there are plugins that have not been installed
#+end_src
** Display pretty text graphics
Now that all the possibilities for launching other environments or interactive
prompts have been exhausted, we can do the thing. The thing that makes opening
new terminals fun and exciting.
#+begin_src shell :tangle .zshrc
  (( $COLUMNS <= 84 )) && FETCH='pfetch' || FETCH='neofetch'
  $FETCH #--ascii_colors 4 --colors 7 4 4 4 4 7
#+end_src
** set options and appease wizards
The following was originally added automatically by PowerLevel10k's setup
wizard. P10K is the prompt I use and is clean, extensible, and feature-rich.
(keep the comments so it doesn't regenerate)
#+begin_src shell :tangle .zshrc
  # Enable Powerlevel10k instant prompt. Should stay close to the top of
  # .zshrc. Initialization code that may require console input
  # (password prompts, [y/n] confirmations, etc.) must go above this block;
  # everything else may go below.
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
      source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi
#+end_src
The following is currently disabled, but comes from Luke Smith's config. If I
used the tty more I might re-enable it.
#+begin_src shell :tangle .zshrc
  # Switch escape and caps if tty and no passwd required:
  # sudo -n loadkeys ~/.local/share/ttymaps.kmap 2>/dev/null
#+end_src
And now for some boilerplate-ish settings that various zsh setup wizards apply
on first run (Keep the comments so they don't regenerate):
#+begin_src shell :tangle .zshrc
  # Lines configured by zsh-newuser-install
  HISTFILE=~/.local/share/zsh/histfile
  HISTSIZE=1000
  SAVEHIST=1000
  setopt extendedglob nomatch
  setopt HIST_IGNORE_ALL_DUPS
  unsetopt autocd beep
  # End of lines configured by zsh-newuser-install
  # The following lines were added by compinstall
  zstyle :compinstall filename "${ZDOTDIR}/.zshrc"
  autoload -Uz compinit
  # Basic auto/tab complete
  zstyle ':completion:*' menu select
  zmodload zsh/complist
  _comp_options+=(globdots) # Include hidden files.
  compinit
  # End of lines added by compinstall
#+end_src
And finally, load the cache file for powerlevel10k if it exists.
#+begin_src shell :tangle .zshrc
  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  [[ ! -f $ZDOTDIR/.p10k.zsh ]] || source $ZDOTDIR/.p10k.zsh
#+end_src
Next we source some external settings files I wrote to keep the
.zshrc clean:
#+begin_src shell :tangle .zshrc
  # source aliases and functions files
  source $ZDOTDIR/aliases.zsh
  source $ZDOTDIR/functions.zsh
#+end_src
** vi is pretty cool
Since the emacs terminal is bad, let's rely on zsh itself for vi emulation (it
actually does a pretty decent job and even has a visual mode like vim):
#+begin_src shell :tangle .zshrc
  # Use vim keys in tab complete menu etc:
  bindkey -M menuselect 'h' vi-backward-char
  bindkey -M menuselect 'k' vi-up-line-or-history
  bindkey -M menuselect 'l' vi-forward-char
  bindkey -M menuselect 'j' vi-down-line-or-history
  bindkey -v "^?" backward-delete-char
  autoload edit-command-line; zle -N edit-command-line
  bindkey '^v' edit-command-line

  autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
  zle -N up-line-or-beginning-search
  zle -N down-line-or-beginning-search
  bindkey '^[[A' up-line-or-beginning-search
  bindkey '^[[B' down-line-or-beginning-search
  bindkey -M vicmd 'k' up-line-or-beginning-search
  bindkey -M vicmd 'j' down-line-or-beginning-search
#+end_src
The following is copied more-or-less from Luke Smith's.zshrc. I
have, however, done a bit of syntax policing and line-shuffling. What this
actually does is enable nvim-style terminal cursor-shape changes on changing
zsh's built-in vi modes. insert is a bar, normal and visual are blocks, replace
is an underscore. This is a killer feature. Once you use it you will not be able
to live without it.
#+begin_src shell :tangle .zshrc
  #############################################################
  ######   Luke Smith's custom vi-mode cursor switcher   ######
  #############################################################
  zle-keymap-select() {
      if [[ ${KEYMAP} == vicmd ]] || [[ $1 = 'block' ]];
      then echo -ne '\e[1 q'
      elif [[ ${KEYMAP} == main ]] ||
               [[ ${KEYMAP} == viins ]] ||
               [[ ${KEYMAP} = '' ]] ||
               [[ $1 = 'beam' ]];
      then echo -ne '\e[5 q'
      fi
  }
  zle-line-init() {
      zle -K viins # initiate `vi insert` as keymap (can be removed
      # if `bindkey -V` has been set elsewhere)
      echo -ne "\e[5 q"
  }
  zle -N zle-keymap-select
  zle -N zle-line-init
  echo -ne '\e[5 q' # Use beam shape cursor on startup.
  preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.
  #############################################################
  ###### End Luke Smith's custom vi-mode cursor switcher ######
  #############################################################
#+end_src
** load =zplug= statements
Finally, load those zplugs:
#+begin_src shell :tangle .zshrc
  zplug check --verbose || (
      printf "Install? [y/N]: "
      if read -q; then
          echo; zplug install
      fi
  )
  zplug load
#+end_src
And that's actually it for the .zshrc.

* aliases.zsh
** User edit warning
Point readers back to this source file:
#+begin_src shell :tangle aliases.zsh
  # Don't edit this file. Edit the README.org instead, and tangle it.
#+end_src
** Rust coreutil-replacement aliases, now with fallback
#+begin_src shell :tangle aliases.zsh
  #which doas >/dev/null && alias sudo='doas'
  [ -x $(which exa) ] && alias ls='exa'
  [ -x $(which exa) ] && alias tree='exa -T'
  # [ -x $(which rg) ] && alias grep='rg -uuu'
  #which dotacat >/dev/null && alias lolcat='dotacat'
#+end_src
** color and auto-sudo
#+begin_src shell :tangle aliases.zsh
  # [ -f /usr/bin/paru ] && alias pacman="paru" || alias pacman="sudo pacman"
  alias cd..="cd .."
  alias spider="spider -s 2 -c"
  alias mounr="doas mount"
  alias umounr="doas umount -r"
  alias ping="ping -c 4"
  alias ip="ip -c"
#+end_src
* functions.zsh
** Tmux clean function to kill detached sessions
#+begin_src shell :tangle functions.zsh
  tmux-clean() {
      sessions=$(
          tmux ls |
              grep -v attached |
              sed 's/\:\s.*$//'
              )
      for session in $sessions
      do
          tmux kill-session -t $session
      done
  }
#+end_src
** clear() is broken in tmux, so redefine it
#+begin_src shell :tangle functions.zsh
  [ -n "${TMUX}" ] && (
      clear=$(which clear)
      clear() {
          $clear &&
              tmux clear-history &&
              $clear
      }
  )
#+end_src
** Emacs does not handle recursion well
Look at https://github.com/akermu/emacs-libvterm for more...
#+begin_src shell :tangle functions.zsh
  if [[ "$INSIDE_EMACS" = 'vterm' ]] \
         && [[ -n ${EMACS_VTERM_PATH} ]] \
         && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
      source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh &&
          alias emacs="vterm_cmd find-file"
      vterm_set_directory() {
          vterm_cmd update-pwd "$PWD/"
      }
      autoload -U add-zsh-hook
      add-zsh-hook -Uz chpwd (){ vterm_set_directory }
  fi
#+end_src
** Optionally keep raw escape codes
#+begin_src shell :tangle functions.zsh
  faketty() {
      script -qfc $(printf '%q ' "$@") /dev/null
  }
#+end_src
** Tell vim to highlight the file as sh
(their zsh highlighting is ugly.)
#+begin_src shell :tangle functions.zsh
  # vim: set ft=sh :
#+end_src
* zprofile
** Tell vim to highlight the file as sh
(their zsh highlighting is ugly.)
#+begin_src shell :tangle zprofile
  # vim: set ft=sh :
#+end_src
** set the XDG directories to their proper values, just in case
#+begin_src shell :tangle zprofile
  export XDG_CONFIG_HOME="$HOME/.config"
  export XDG_DATA_HOME="$HOME/.local/share"
  export XDG_CACHE_HOME="$HOME/.cache"
#+end_src
** redirect all zsh files from =~= to =~/.config/zsh=
#+begin_src shell :tangle zprofile
  export ZDOTDIR="$XDG_CONFIG_HOME/zsh"
  export ZPLUG_HOME="$ZDOTDIR/zplug"
#+end_src
** An old attempt to silence perl scripts. Sort of useful still.
#+begin_src shell :tangle zprofile
  export LANG="en_US.UTF-8"
  export LC_COLLATE="C"
#+end_src
** manpager
#+begin_src shell :tangle zprofile
  export MANPAGER="nvim +Man!"
#+end_src
** editor
#+begin_src shell :tangle zprofile
  export EDITOR="nvim"
#+end_src
** Some theming
#+begin_src shell :tangle zprofile
  export BAT_THEME="base16"
  export QT_QPA_PLATFORMTHEME="gtk2"
  export NEOVIDE_MULTIGRID="yeah"
#+end_src
** XKB option exports. Broken; doesn't work.
#+begin_src shell :tangle zprofile
  export XKB_DEFAULT_LAYOUT="us"
  export XKB_DEFAULT_OPTS="custom:super_esc"
#+end_src
** wayland scaling, scrolling, DPI
#+begin_src shell :tangle zprofile
  export MOZ_USE_XINPUT2="1"
  export WINIT_HIDPI_FACTOR="1.0"
  export WINIT_X11_SCALE_FACTOR="1.0"
#+end_src
** Cleaning up home directory
*** Xmonad directories
(see https://wiki.archlinux.org/title/XDG_Base_Directory)
#+begin_src shell :tangle zprofile
  export XMONAD_CACHE_DIR="$XDG_CACHE_HOME/xmonad"
  export XMONAD_CONFIG_DIR="$XDG_CONFIG_HOME/xmonad"
  export XMONAD_DATA_DIR="$XDG_DATA_HOME/xmonad"
#+end_src
*** language-specific package managers
**** Haskell
GHCup just needs any value. Stack needs a specific location.
#+begin_src shell :tangle zprofile
  export GHCUP_USE_XDG_DIRS="anything"
  export STACK_ROOT="$XDG_DATA_HOME/stack"
#+end_src
**** NPM clutters everything up unless we add these lines:
(also see: =npm config ls -l | grep /=)
#+begin_src shell :tangle zprofile
  export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/config
  export NPM_CONFIG_CACHE=$XDG_CACHE_HOME/npm
  export NPM_CONFIG_TMP=$XDG_RUNTIME_DIR/npm
#+end_src
**** thankfully cargo/rust only needs +one+ two
#+begin_src shell :tangle zprofile
  export RUSTUP_HOME="$XDG_DATA_HOME"/rustup 
  export CARGO_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/cargo"
#+end_src
**** as does golang
#+begin_src shell :tangle zprofile
  export GOPATH="${XDG_DATA_HOME:-$HOME/.local/share}/go"
#+end_src
**** and python, somehow
#+begin_src shell :tangle zprofile
  export MYPY_CACHE_DIR="$XDG_CACHE_HOME"/mypy 
#+end_src
*** Other config directories
**** passwords and encryption
Not actively using but will definitely come in handy some time in the
indeterminate future.
#+begin_src shell :tangle zprofile
  export GNUPGHOME="$XDG_CONFIG_HOME/gnupg"
  export PASSWORD_STORE_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/password-store"
#+end_src
**** android SDK
without this =adb= etc give stupid errors
#+begin_src shell :tangle zprofile
  export ANDROID_SDK_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/android"
#+end_src
*** RC files
**** xorg
for some reason =startx= doesn't respect $XINITRC so you have to pass it
manually
#+begin_src shell :tangle zprofile
  export XINITRC="${XDG_CONFIG_HOME:-$HOME/.config}/x11/xinitrc"
  export XAUTHORITY="$XDG_RUNTIME_DIR"/Xauthority 
#+end_src
**** gtk2 rc
#+begin_src shell :tangle zprofile
  export GTK2_RC_FILES="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-2.0/gtkrc-2.0"
#+end_src
**** Wget
I don't actually have a wgetrc so this is disabled
#+begin_src shell :tangle zprofile
  # export WGETRC="${XDG_CONFIG_HOME:-$HOME/.config}/wget/wgetrc"
#+end_src
*** History files
**** for the shell itself
#+begin_src shell :tangle zprofile
  export HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/history"
#+end_src
**** for =less=
that =.lesshst= file is so annoying...
#+begin_src shell :tangle zprofile
  export LESSHISTFILE="${XDG_CACHE_HOME:-$HOME/.cache}/less-history"
#+end_src
*** tmux tmpdir
#+begin_src shell :tangle zprofile
  export TMUX_TMPDIR="$XDG_RUNTIME_DIR"
#+end_src
** PATH variable
#+begin_src shell :tangle zprofile
  export PATH=/opt/local/bin:/home/mitch/.dotnet/tools:/opt/local/sbin:/opt/homebrew/bin:/opt/homebrew/sbin:/opt/flutter/bin:~/.local/bin:$PATH:~/.local/share/cargo/bin:~/.local/share/brew/bin:~/.local/share/brew/sbin:/home/linuxbrew/.linuxbrew/bin

#+end_src
